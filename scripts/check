#!/usr/bin/env nu

# Check code for quality and correctness.
#
# Running `check` without a sub-command is the same as running `check commit`.
def main []: nothing -> string {
    main commit
}


### Grouped tasks

# Run all code checks that should pass before committing.
#
# This performs the following checks in order and stops on the first failure:
#
#   - Static type checking
#   - Formatting
#   - Linting
#   - Unit testing
def "main commit" []: nothing -> string {
    common
    main test
}

# Run all code checks that should pass before pushing.
#
# This performs the following checks in order and stops on the first failure:
#
#   - All the checks from `check commit`
#   - Coverage
def "main push" []: nothing -> string {
    common
    main test cover
    main accept cover
}


### Individual tasks

# Run static type checking on all source code.
def --wrapped "main types" [
    ...rest: string # Extra arguments for hatch test
]: nothing -> string {
    hatch run types:check ...$rest
}

# Run formatters and linters on all source code.
def --wrapped "main lint" [
    ...rest: string # Extra arguments for hatch test
]: nothing -> string {
    hatch fmt ...$rest
}

# Run all unit tests.
def --wrapped "main test" [
    ...rest: string # Extra arguments for hatch test
]: nothing -> string {
    hatch test --parallel ...$rest
}

# Check code coverage for all unit tests.
def --wrapped "main test cover" [
    ...rest: string # Extra arguments for hatch test
]: nothing -> string {
    hatch test --cover ...$rest
}

# Run acceptance tests.
def --wrapped "main accept" [
    ...rest: string # Extra arguments for radish
]: nothing -> string {
    hatch run accept:test ...$rest
}

# Check code coverage on acceptance tests.
def --wrapped "main accept cover" [
    ...rest: string # Extra arguments for radish
]: nothing -> string {
    hatch run accept:cover ...$rest
}


## Internal commands

# Common checks for all sub-commands.
def common []: nothing -> string {
    main types
    main lint
}
