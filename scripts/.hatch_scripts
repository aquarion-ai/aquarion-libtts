#!/usr/bin/env nu
# SPDX-FileCopyrightText: 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
# SPDX-License-Identifier: AGPL-3.0-only

# Part of the aquarion-libtts library of the Aquarion AI project.
# Copyright (C) 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.


# Command run by Hatch scripts. DO NOT RUN DIRECTLY.
def main []: nothing -> string {
    help main
}

let radish_common_args = ["-b", "steps/", "features/"]
let radish_normal_args = ["--tags", "not wip", "-f", "dots", "--shuffle"]
let coverage_args = ["--rcfile=radish_coverage.toml"]

# Internal command. DO NOT RUN DIRECTLY.
def --wrapped "main accept" [...rest: string]: nothing -> string {
    radish ...$radish_common_args ...$radish_normal_args ...$rest
}

# Internal command. DO NOT RUN DIRECTLY.
def --wrapped "main accept cover" [...rest:string]: nothing -> string  {
    (
        coverage run ...$coverage_args ...(which radish).path ...$radish_common_args
        ...$radish_normal_args ...$rest
    )
    coverage report -m ...$coverage_args
}

# Internal command. DO NOT RUN DIRECTLY.
def --wrapped "main accept wip" [...rest: string]: nothing -> string {
    radish ...$radish_common_args --wip --tags wip --write-ids ...$rest
}

# Internal command. DO NOT RUN DIRECTLY.
def "main babel extract tests" []: nothing -> string {
    let project = (hatch project metadata name)
    let version = (hatch version)
    let author_name = (hatch project metadata authors | from json | get 0.name)
    let author_email = (hatch project metadata authors | from json | get 0.email)
    let header = $"# SPDX-FileCopyrightText: 2025-present ($author_name) <($author_email)>
# SPDX-License-Identifier: AGPL-3.0-only
#
# Translations template for PROJECT.
# Copyright \(C) 2025-present ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#"
    (
        pybabel extract -o tests/api/locale/test.pot tests/api/
        --project $project --version $version --no-wrap --header-comment $header
        --copyright-holder $"($author_name) <($author_email)>"
        --msgid-bugs-address $author_email
    )
}

# Internal command. DO NOT RUN DIRECTLY.
def "main babel init tests" [locale: string]: nothing -> string {
    (
        pybabel init -i tests/api/locale/test.pot -d tests/api/locale/ -D test
        --no-wrap -l $locale
    )
}

# Internal command. DO NOT RUN DIRECTLY.
def "main babel update tests" [--headers (-h)]: nothing -> string {
    mut extra = ""
    if $headers { $extra = "--update-header-comment" }
    (
        pybabel update -i tests/api/locale/test.pot -d tests/api/locale/ -D test
        --no-wrap --previous $extra
    )
}

# Internal command. DO NOT RUN DIRECTLY.
def "main babel compile tests" []: nothing -> string {
    pybabel compile -D test -d tests/api/locale --statistics
}
