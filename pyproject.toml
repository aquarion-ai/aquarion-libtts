# SPDX-FileCopyrightText: 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
# SPDX-License-Identifier: AGPL-3.0-only

# Part of the aquarion-libtts library of the Aquarion AI project.
# Copyright (C) 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

### Core ###

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling~=1.27.0", "hatch-semver~=2.0.2"]

[project]
authors = [
  {name = "Krys Lawrence", email = "aquarion.5.krystopher@spamgourmet.org"},
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: Hatch",
  "Framework :: Pytest",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Topic :: Multimedia :: Sound/Audio",
  "Topic :: Multimedia :: Sound/Audio :: Speech",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Text Processing",
  "Topic :: Text Processing :: Linguistic",
  "Typing :: Typed",
]
dependencies = [
  "babel~=2.17.0",
  "loguru~=0.7.3",
  "pluggy~=1.6.0",
  "pydantic~=2.11.7",
]
description = 'Text To Speech (TTS) beckend library for Aquarion AI'
dynamic = ["version"]
keywords = ["aquarion", "ai", "tts", "speech"]
license = "AGPL-3.0-only"
license-files = ["LICENSES/AGPL-3.0-only.txt"]
name = "aquarion-libtts"
readme = "README.md"
requires-python = ">=3.12"

[project.urls]
Changelog = "https://github.com/aquarion-ai/aquarion-libtts/blob/main/CHANGELOG.md"
Documentation = "https://github.com/aquarion-ai/aquarion-docs"
#Download = ""
Homepage = "https://github.com/aquarion-ai"
Issues = "https://github.com/aquarion-ai/aquarion-libtts/issues"
Source = "https://github.com/aquarion-ai/aquarion-libtts"

[project.optional-dependencies]
cpu = [
  "torch~=2.7.1",
]
cu128 = [
  "torch~=2.7.1",
]
kokoro = [
  "en-core-web-sm~=3.8.0",
  "kokoro~=0.9.4",
  "pip~=25.1.1",
  "torch~=2.7.1",
]

[project.entry-points.'aquarion-libtts']
kokoro_v1 = "aquarion.libs.libtts._kokoro"

### UV ###

[dependency-groups]
accept = [
  "bsdiff4~=1.2.6",
  "coverage[toml]~=7.9.1",
  "radish-bdd~=0.18.2",
]
babel = [
  "babel~=2.17.0",
]
hatch-static-analysis = [
  "ruff~=0.12.0",
]
hatch-test = [
  "coverage-enable-subprocess==1.0", # Hatch test default inclusion
  "coverage[toml]~=7.9.1", # Hatch test default inclusion
  "logot~=1.4.0",
  "loguru~=0.7.3",
  "pytest-mock~=3.14.1", # Hatch test default inclusion
  "pytest-randomly~=3.16.0", # Hatch test default inclusion
  "pytest-rerunfailures~=15.1.0", # Hatch test default inclusion
  "pytest-socket~=0.7.0",
  "pytest-xdist[psutil]~=3.7.0", # Hatch test default inclusion
  "pytest~=8.4.1", # Hatch test default inclusion
]
hatch-uv = [
  "uv~=0.7.13",
]
types = [
  "logot~=1.4.0",
  "loguru~=0.7.3",
  "mypy~=1.16.1",
  "pandas_stubs~=2.2.3", # PyTorch & Kokoro TTS stub
  "pytest-mock~=3.14.1",
  "pytest~=8.4.1",
  "scipy-stubs~=1.15.3", # PyTorch & Kokoro TTS stub, I think
  "types-colorama~=0.4.15", # mypy type stub
  "types-pexpect~=4.9.0", # mypy type stub
  "types-Pygments~=2.19.0", # mypy type stub
  "types-setuptools~=80.9.0", # mypy type stub
  "types_beautifulsoup4~=4.12.0", # PyTorch & Kokoro TTS stub
  "types_defusedxml~=0.7.0", # PyTorch & Kokoro TTS stub
  "types_html5lib~=1.1.11", # PyTorch & Kokoro TTS stub
  "types_networkx~=3.5.0", # PyTorch & Kokoro TTS stub
  "types_openpyxl~=3.1.5", # numpy mypy plugin stub
  "types_protobuf~=6.30.2", # PyTorch & Kokoro TTS stub
  "types_psutil~=7.0.0", # PyTorch & Kokoro TTS stub
  "types_python_dateutil~=2.9.0", # numpy mypy plugin stub
  "types_pytz~=2025.2.0", # PyTorch & Kokoro TTS stub
  "types_pywin32~=310.0.0", # PyTorch & Kokoro TTS stub
  "types_pyyaml~=6.0.12", # PyTorch & Kokoro TTS stub
  "types_regex~=2024.11.6", # PyTorch & Kokoro TTS stub
  "types_requests~=2.32.4", # PyTorch & Kokoro TTS stub
  "types_simplejson~=3.20.0", # PyTorch & Kokoro TTS stub
  "types_tabulate~=0.9.0", # PyTorch & Kokoro TTS stub
  "types_tensorflow~=2.18.0", # PyTorch & Kokoro TTS stub
  "types_tqdm~=4.67.0", # PyTorch & Kokoro TTS stub
]

[tool.uv]
conflicts = [
  [
    {extra = "cpu"},
    {extra = "cu128"},
  ],
]

[tool.uv.sources]
aquarion-libtts = {workspace = true}
en-core-web-sm = {url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"}
torch = [
  {index = "pytorch-cpu", extra = "cpu"},
  {index = "pytorch-cu128", extra = "cu128"},
]

[[tool.uv.index]]
explicit = true
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"

[[tool.uv.index]]
explicit = true
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"

### Hatch ###

[tool.hatch.env]
requires = [
  "hatch-uvenv~=0.3.4",
]

[tool.hatch.version]
path = "src/aquarion/libs/libtts/__about__.py"
scheme = "semver"
validate-bump = true

[tool.hatch.build.targets.wheel]
packages = ["src/aquarion"]

# Env: default

[tool.hatch.envs.default]
features = ["kokoro", "cu128"]
type = "uvenv"

# Env: hatch-uv

[tool.hatch.envs.hatch-uv]
groups = ["hatch-uv"]
type = "uvenv"

# Env: hatch-static-analysis

[tool.hatch.envs.hatch-static-analysis]
config-path = "none"
groups = ["hatch-static-analysis"]
type = "uvenv"

# Env: hatch-test

[tool.hatch.envs.hatch-test]
groups = ["hatch-test"]
# Cannot use parallel and coverage at the same time.
# https://github.com/pypa/hatch/issues/1635
# parallel = true
# We do not want to *always* randomize.
# randomize = true
features = ["kokoro", "cpu"]
type = "uvenv"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12"]

# Env: types

[tool.hatch.envs.types]
features = ["kokoro", "cpu"]
groups = ["types"]
type = "uvenv"

[tool.hatch.envs.types.scripts]
check = """
    mypy --install-types --non-interactive {args:src tests}
"""

# Env: accept

[tool.hatch.envs.accept]
features = ["kokoro", "cu128"]
groups = ["accept"]
type = "uvenv"

[tool.hatch.envs.accept.scripts]
cover = ".hatch_scripts accept cover {args}"
test = ".hatch_scripts accept {args}"
wip = ".hatch_scripts accept wip {args}"

# Env: accept-ci

[tool.hatch.envs.accept-ci]
features = ["kokoro", "cpu"]
groups = ["accept"]
type = "uvenv"

[tool.hatch.envs.accept-ci.scripts]
cover = ".hatch_scripts accept cover --ci {args}"

# Env: babel

[tool.hatch.envs.babel]
features = [] # Prevent inheriting from default
groups = ["babel"]
type = "uvenv"

[tool.hatch.envs.babel.scripts]
compile-src = ".hatch_scripts babel compile src"
compile-tests = ".hatch_scripts babel compile tests"
extract-src = ".hatch_scripts babel extract src"
extract-tests = ".hatch_scripts babel extract tests"
init-src = ".hatch_scripts babel init src {args}"
init-tests = ".hatch_scripts babel init tests {args}"
update-src = ".hatch_scripts babel update src {args}"
update-tests = ".hatch_scripts babel update tests {args}"

### Coverage ###

[tool.coverage.run]
branch = true
data_file = ".cache/coverage/coverage"
omit = ["src/aquarion/libs/libtts/__about__.py"]
source_pkgs = ["aquarion", "tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
fail_under = 100
show_missing = true
#skip_covered = true # Not sure if I want this.  To try later.

### Ruff ###

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 88 # Sticking with Black's standard for now instead of ruff's 120.

[tool.ruff.format]
docstring-code-format = true
#docstring-code-line-length = 80

[tool.ruff.lint]
ignore = [
  #   "D211",
  #   "D212",
  #   "W191",
  #   "E111",
  #   "E114",
  #   "E117",
  #   "D206",
  #   "D300",
  #   "Q000",
  #   "Q001",
  #   "Q002",
  #   "Q003",
  #   "COM819",
  "D203",
  "D213",
  "COM812",
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"**/steps/*" = ["INP001", "D103", "S"]
"**/tests/**/*" = [
  "PLC1901",
  "PLR2004",
  "PLR6301",
  "S",
  "TID252",
  "D102",
  "D103",
  "D105",
  "D107",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["aquarion.libs.libtts"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

### mypy ###

[tool.mypy]
cache_dir = ".cache/mypy"
exclude = ["tests/acceptance"]
explicit_package_bases = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/src,$MYPY_CONFIG_FILE_DIR/typings"
plugins = []
pretty = true
python_version = "3.12"
show_column_numbers = true
show_error_codes = true
show_error_context = true

strict = true
# Strict mode enables the following:
#   warn_unused_configs
#   disallow_any_generics
#   disallow_subclassing_any
#   disallow_untyped_calls
#   disallow_untyped_defs
#   disallow_incomplete_defs
#   check_untyped_defs
#   disallow_untyped_decorators
#   warn_redundant_casts
#   warn_unused_ignores
#   warn_return_any
#   no_implicit_reexport
#   strict_equality
#   extra_checks

local_partial_types = true
warn_incomplete_stub = true
warn_no_return = true
warn_unreachable = true
warn_unused_configs = true

# Going to try these out
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = true
extra_checks = true
strict_bytes = true
strict_concatenate = true

### pytest ###

[tool.pytest.ini_options]
addopts = "--strict-markers --disable-socket"
cache_dir = ".cache/pytest"
empty_parameter_set_mark = "xfail"
filterwarnings = [
  # Kokoro TTS warnings 0.9.4
  "ignore::DeprecationWarning:spacy.*",
  "ignore::DeprecationWarning:weasel.*",
  "ignore::UserWarning:torch.*",
  "ignore::FutureWarning:torch.*",
]
logot_capturer = "logot.loguru.LoguruCapturer"
xfail_strict = true

[tool.codespell]
builtin = ["clear", "rare", "usage", "names"]
check-filenames = true
check-hidden = false
ignore-words = ["project-words.txt"]
quiet-level = 0
skip = ["__pycache__", "uv.lock", "*.po"]
write-changes = true

[tool.commitizen]
major_version_zero = true
name = "cz_gitmoji"
update_changelog_on_bump = false
