[build-system]
requires = ["hatchling~=1.27.0"]
build-backend = "hatchling.build"

[project]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: Hatch",
  "Framework :: Pytest",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Topic :: Multimedia :: Sound/Audio",
  "Topic :: Multimedia :: Sound/Audio :: Speech",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Text Processing",
  "Topic :: Text Processing :: Linguistic",
  "Typing :: Typed",
]
name = "aquarion-tts"
dynamic = ["version"]
description = 'Text To Speech (TTS) beckend components for Aquarion AI'
readme = "README.md"
requires-python = ">=3.13"
license = "AGPL-1.0-only"
license-files = ["LICENSE"]
keywords = ["aquarion", "ai", "tts", "speech"]
authors = [
  { name = "Krys Lawrence", email = "aquarion.5.krystopher@spamgourmet.org" },
]
dependencies = []

[project.urls]
Homepage = "https://github.com/aquarion-ai"
Documentation = "https://github.com/aquarion-ai/aquarion-docs"
#Changelog = ""
Issues = "https://github.com/aquarion-ai/aquarion-tts/issues"
Source = "https://github.com/aquarion-ai/aquarion-tts"
#Download = ""

[tool.hatch.version]
path = "src/aquarion_tts/__about__.py"

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.hatch-uv]
dependencies = ["uv~=0.6.14"]

[tool.hatch.envs.types]
extra-dependencies = ["mypy~=1.15.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/aquarion_tts tests}"

[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff~=0.11.6"]
config-path = "none"

[tool.coverage.run]
source_pkgs = ["aquarion_tts", "tests"]
branch = true
parallel = true
omit = ["src/aquarion_tts/__about__.py"]

[tool.coverage.paths]
aquarion_tts = ["src/aquarion_tts", "*/aquarion-tts/src/aquarion_tts"]
tests = ["tests", "*/aquarion-tts/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.ruff]
line-length = 88 # Sticking with Black's standard for now instead of ruff's 120.

[tool.ruff.format]
docstring-code-format = true
#docstring-code-line-length = 80

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "D211",
  "D212",
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "D203",
]

[tool.ruff.lint.per-file-ignores]
#"**/scripts/*" = ["INP001", "T201"]
"**/tests/**/*" = ["PLC1901", "PLR2004", "PLR6301", "S", "TID252"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["aquarion_tts"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.mypy]
python_version = "3.13"
strict = true
# Strict mode enables the following:
#   warn_unused_configs
#   disallow_any_generics
#   disallow_subclassing_any
#   disallow_untyped_calls
#   disallow_untyped_defs
#   disallow_incomplete_defs
#   check_untyped_defs
#   disallow_untyped_decorators
#   warn_redundant_casts
#   warn_unused_ignores
#   warn_return_any
#   no_implicit_reexport
#   strict_equality
#   extra_checks
warn_no_return = true
warn_unreachable = true
local_partial_types = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
warn_incomplete_stub = true
mypy_path = "typings"
cache_dir = ".cache/mypy"
warn_unused_configs = true
# Going to try these out
strict_concatenate = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
extra_checks = true
strict_bytes = true
