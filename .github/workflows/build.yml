# SPDX-FileCopyrightText: 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
# SPDX-License-Identifier: AGPL-3.0-only

# Part of the aquarion-libtts library of the Aquarion AI project.
# Copyright (C) 2025-present Krys Lawrence <aquarion.5.krystopher@spamgourmet.org>
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

# This workflow will install Python dependencies, run tests and lint with a variety of
# Python versions.
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: build

on:
  push:
    branches: ["main"]
    paths-ignore:
      - ".vscode/**"
      - ".*"
      - "*.md"
      - "*.txt"
      - "*.feature"
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
      # - name: Free Disk Space (Ubuntu)
      #   uses: jlumbroso/free-disk-space@v1.3.1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install devbox # Has it's own cache
        uses: jetify-com/devbox-install-action@v0.13.0
        with:
          enable-cache: "true"
          devbox-version: "0.16.0"

      - name: Cache uv Python
        uses: actions/cache@v4
        with:
          key: uv-python-${{ hashFiles('devbox.json') }}
          restore-keys: uv-python
          path: |
            ~/.local/share/uv/python

      - name: Cache dependencies, venvs and Hugging Face data
        uses: actions/cache@v4
        with:
          key: dependencies-venvs-hf_data-${{ hashFiles('uv.lock') }}
          restore-keys: dependencies-venvs-hf_data
          path: |
            ~/.cache/uv
            ~/.cache/pip
            ~/.local/share/hatch/env
            ~/.cache/huggingface

      # - name: Cache Hatch Pythons
      #   uses: actions/cache@v4
      #   with:
      #       key: hatch-pythons-${{ hashFiles('pyproject.toml') }}
      #       restore-keys: hatch-pythons
      #       path: ~/.local/share/hatch/pythons

      - name: Cache .cache and Trivy DB
        uses: actions/cache@v4
        with:
          key: .cache-trivy-${{ github.run_id }}
          restore-keys: .cache-trivy
          path: |
            .cache
            ~/.cache/trivy

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: pre-commit
          path: |
            ~/.cache/pre-commit

      - name: Initialize environment
        run: devbox run init

      # - name: Check pre-commit and pre-push hooks
      #   run: devbox run check pre all

      # - name: Check types
      #   run: devbox run check types

      # - name: Check lint
      #   run: devbox run check lint

      - name: Run tests on ${{ matrix.python-version }}
        run: devbox run check test cover -py ${{ matrix.python-version }}

      - name: Run acceptance tests
        run: devbox run check accept cover --ci

      - name: Run security checks
        run: devbox run check sec

      # - name: Run licence checks
      #   run: devbox run check licences
      - name: Create Actions report
        run: |
          export TEST_TOTAL=$(devbox run report coverage test --total --ci)
          export ACCEPT_TOTAL=$(devbox run report coverage accept --total --ci)
          export SEC_TOTAL=$(devbox run report sec total)
          export SEC_HIGHEST=$(devbox run report sec highest)
          # [[ "$SEC_HIGHEST" == "HIGH" || "$SEC_HIGHEST" == "CRITICAL" ]] && export SEC_ERROR=true || export SEC_ERROR=false
          # echo "test_total=$TEST_TOTAL" >> $GITHUB_ENV
          # echo "accept_total=$ACCEPT_TOTAL" >> $GITHUB_ENV
          # echo "sec_total=$SEC_TOTAL" >> $GITHUB_ENV
          # echo "sec_highest=$SEC_HIGHEST" >> $GITHUB_ENV
          # echo "sec_error=$SEC_ERROR" >> $GITHUB_ENV
          # echo "### Total test coverage: ${TEST_TOTAL}%" >> $GITHUB_STEP_SUMMARY
          # echo "### Total acceptance test coverage: ${ACCEPT_TOTAL}%" >> $GITHUB_STEP_SUMMARY
          # echo "### Total vulnerabilities: ${SEC_TOTAL}" >> $GITHUB_STEP_SUMMARY
          # echo "### Highest vulnerability severity level: ${SEC_HIGHEST}" >> $GITHUB_STEP_SUMMARY

        # - name: Get repo name
        #   run: echo "repo_name=${{ github.repository }}" | sed "s/\//_/" >> $GITHUB_ENV

        # - name: Create Test Coverage Badge
        #   uses: schneegans/dynamic-badges-action@v1.7.0
        #   with:
        #     auth: ${{ secrets.GIST_SECRET }}
        #     gistID: 079b402971d82c07d05c74f37c57b088
        #     filename: ${{ env.repo_name }}__${{ github.ref_name }}__test.json
        #     label: coverage
        #     message: ${{ env.test_total }}%
        #     minColorRange: 50
        #     maxColorRange: 90
        #     valColorRange: ${{ env.test_total }}

        # - name: Create Acceptance Coverage Badge
        #   uses: schneegans/dynamic-badges-action@v1.7.0
        #   with:
        #     auth: ${{ secrets.GIST_SECRET }}
        #     gistID: 079b402971d82c07d05c74f37c57b088
        #     filename: ${{ env.repo_name }}__${{ github.ref_name }}__accept.json
        #     label: acceptance
        #     message: ${{ env.accept_total }}%
        #     minColorRange: 50
        #     maxColorRange: 80
        #     valColorRange: ${{ env.accept_total }}

        # - name: Create Security Total Badge
        #   uses: schneegans/dynamic-badges-action@v1.7.0
        #   with:
        #     auth: ${{ secrets.GIST_SECRET }}
        #     gistID: 079b402971d82c07d05c74f37c57b088
        #     filename: ${{ env.repo_name }}__${{ github.ref_name }}__sec_total.json
        #     label: vulnerabilities
        #     message: ${{ env.sec_total }}
        #     isError: ${{ env.sec_error }}

        # - name: Create Security Severity Badge
        #   uses: schneegans/dynamic-badges-action@v1.7.0
        #   with:
        #     auth: ${{ secrets.GIST_SECRET }}
        #     gistID: 079b402971d82c07d05c74f37c57b088
        #     filename: ${{ env.repo_name }}__${{ github.ref_name }}__sec_highest.json
        #     label: severity
        #     message: ${{ env.sec_highest }}
        #     isError: ${{ env.sec_error }}
